name: Deploy to Server

on:
    push:
        branches:
            - master

jobs:
    deploy:
        # Zmieniamy, aby użyć naszego lokalnego runnera:
        runs-on: self-hosted # Lub runs-on: [self-hosted, linux, x64]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Setup Deployment Environment
              env:
                  APP_PATH: /opt/calc_app
              run: |
                  echo "Tworzenie/Czyszczenie katalogu docelowego: ${APP_PATH}"

                  # Upewnij się, że katalog docelowy istnieje
                  mkdir -p ${APP_PATH}

                  # Kopiowanie CAŁEJ zawartości (w tym Dockerfile i docker-compose.yml) 
                  # z katalogu roboczego runnera (${{ github.workspace }}) do katalogu docelowego.
                  # Flaga -T zapewnia kopiowanie zawartości, a nie folderu w folderze.
                  cp -rT ${{ github.workspace }} ${APP_PATH}

            - name: Build and Deploy to Docker Swarm
              env:
                  APP_NAME: loan-calc-app
                  STACK_NAME: calc_stack
              run: |
                  # Przejdź do trwałego katalogu aplikacji, który jest kontekstem budowania Dockera
                  cd ${APP_PATH}

                  # --- Krok 1: Budowa i Wdrożenie ---

                  # Usuń stary tag obrazu (aby mieć pewność, że build stworzy nowy)
                  # Używamy || true, ponieważ usunięcie może się nie udać, jeśli obraz jest używany przez usługę Swarm.
                  docker rmi ${APP_NAME}:latest || true

                  echo "Budowanie nowego obrazu: ${APP_NAME}:latest"
                  docker build -t ${APP_NAME}:latest .

                  # WDRAŻANIE DO SWARM
                  # Swarm użyje docker-compose.yml (który zawiera instrukcję rollbacku)
                  echo "Wdrażanie do Docker Swarm pod stosem ${STACK_NAME}..."
                  docker stack deploy -c docker-compose.yml ${STACK_NAME}

                  # --- Krok 2: Weryfikacja ---
                  # Swarm działa w tle, to polecenie tylko pokazuje, że usługa została wysłana do managera
                  echo "Sprawdzanie stanu usługi Swarm. Rollback nastąpi automatycznie w tle w razie awarii."
                  docker service ls | grep ${STACK_NAME}
