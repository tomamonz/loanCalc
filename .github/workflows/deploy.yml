name: Deploy to Server

on:
    push:
        branches:
            - "master"
            - "deployment-fix"
    pull_request:
        branches:
            - "master"

permissions:
    contents: read

concurrency:
    group: deploy-calc-stack
    cancel-in-progress: true

defaults:
    run:
        shell: "bash -euo pipefail {0}"

jobs:
    deploy:
        runs-on: self-hosted
        env:
            # Build/deploy context on the server
            APP_PATH: /opt/calc_app
            STACK_NAME: calc_stack

            # Image ref injected into compose
            IMAGE_REPO: loan-calc-app # change if you push to a registry, e.g. ghcr.io/OWNER/loan-calc-app
            IMAGE_TAG: latest # you can switch to ${{ github.sha }} for immutable tags later

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Sync build context to ${APP_PATH}
              run: |
                  echo "Syncing to ${APP_PATH}"
                  mkdir -p "${APP_PATH}"
                  # ensure no repo metadata bloats build context
                  rm -rf "${APP_PATH}/.git" || true
                  rsync -a --delete --delete-excluded \
                    --exclude '.git' \
                    "${{ github.workspace }}/" "${APP_PATH}/"

            - name: Verify context contents
              run: |
                  echo "Listing ${APP_PATH}:"
                  ls -la "${APP_PATH}"
                  echo "Dockerfile bytes:"; wc -c "${APP_PATH}/Dockerfile" || true
                  echo "docker-compose.yml bytes:"; wc -c "${APP_PATH}/docker-compose.yml" || true

            - name: Build image (${IMAGE_REPO}:${IMAGE_TAG})
              run: |
                  docker build --pull \
                    -f "${APP_PATH}/Dockerfile" \
                    -t "${IMAGE_REPO}:${IMAGE_TAG}" \
                    "${APP_PATH}"

            # If you push to a registry for multi-node Swarm, uncomment:
            # - name: Docker login
            #   run: echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            # - name: Push image
            #   run: |
            #     docker push "${IMAGE_REPO}:${IMAGE_TAG}"

            - name: Render compose with vars (and re-quote cpus for Swarm)
              run: |
                  export IMAGE_REPO IMAGE_TAG
                  docker compose \
                    --project-directory "${APP_PATH}" \
                    -f "${APP_PATH}/docker-compose.yml" \
                    config > /tmp/stack.rendered.yml

                  # Re-quote cpus because `compose config` strips quotes and Swarm requires strings
                  sed -E -i 's/(cpus:\s*)([0-9]+(\.[0-9]+)?)/\1"\2"/g' /tmp/stack.rendered.yml

                  echo "Resolved image lines:"
                  grep -n 'image:' /tmp/stack.rendered.yml || true
                  echo "Resolved cpus lines:"
                  grep -n 'cpus:' /tmp/stack.rendered.yml || true

            - name: Deploy to Swarm (only on push)
              if: github.event_name == 'push'
              run: |
                  docker stack deploy --prune -c /tmp/stack.rendered.yml "${STACK_NAME}"

            - name: Verify rollout (only on push)
              if: github.event_name == 'push'
              run: |
                  echo "Services:"
                  docker stack services "${STACK_NAME}"
                  echo
                  for svc in $(docker stack services --format '{{.Name}}' "${STACK_NAME}"); do
                    echo "---- $svc ----"
                    docker service ps --no-trunc --limit 20 "$svc" || true
                  done

            - name: Cleanup dangling images
              run: |
                  docker image prune -f || true
