name: Deploy to Server (Docker Swarm)

on:
    push:
        branches:
            - master

jobs:
    deploy:
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Deployment Environment
              env:
                  APP_PATH: /opt/calc_app
              run: |
                  echo "Tworzenie/Czyszczenie katalogu docelowego: ${APP_PATH}"

                  # 1. Tworzenie katalogu docelowego (jeśli nie istnieje)
                  mkdir -p ${APP_PATH}

                  # 2. Czyszczenie zawartości (Usuń starą zawartość przed skopiowaniem nowej)
                  # Użyjemy rm -rf, ale bezpieczniej jest usunąć tylko zawartość.
                  # Upewnij się, że Runner ma uprawnienia do zapisu w /opt!
                  # Zadbaj o uprawnienia: chown gitactions:gitactions /opt/calc_app

                  # 3. Kopiowanie CAŁEJ zawartości. Używamy rsync dla lepszej synchronizacji i czystości
                  # Zapewni to skopiowanie wszystkich plików (w tym Dockerfile)
                  rsync -av --delete ${{ github.workspace }}/ ${APP_PATH}/

            - name: Build and Deploy to Docker Swarm
              env:
                  APP_NAME: loan-calc-app
                  STACK_NAME: calc_stack
              run: |
                  # Przejdź do trwałego katalogu aplikacji, który jest kontekstem budowania Dockera
                  cd ${APP_PATH}

                  # --- Krok 1: Budowa i Wdrożenie ---

                  # Usuń stary tag obrazu
                  docker rmi ${APP_NAME}:latest || true

                  echo "Budowanie nowego obrazu: ${APP_NAME}:latest"
                  # Ta komenda teraz znajdzie Dockerfile w bieżącym katalogu ${APP_PATH}
                  docker build -t ${APP_NAME}:latest .

                  # WDRAŻANIE DO SWARM
                  echo "Wdrażanie do Docker Swarm pod stosem ${STACK_NAME}..."
                  docker stack deploy -c docker-compose.yml ${STACK_NAME}

                  # --- Krok 2: Weryfikacja ---
                  echo "Sprawdzanie stanu usługi Swarm."
                  docker service ls | grep ${STACK_NAME}
