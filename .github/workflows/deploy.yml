name: Deploy to Server

on:
    push:
        branches: [master]

permissions:
    contents: read

concurrency:
    group: deploy-calc-stack
    cancel-in-progress: true

defaults:
    run:
        shell: bash -euo pipefail

jobs:
    deploy:
        runs-on: self-hosted
        env:
            APP_PATH: /opt/calc_app
            STACK_NAME: calc_stack
            IMAGE_NAME: loan-calc-app # matches your compose: image: loan-calc-app:latest
            IMAGE_TAG: latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Sync build context to server path
              run: |
                  echo "Syncing to ${APP_PATH}"
                  sudo mkdir -p "${APP_PATH}"
                  sudo rsync -a --delete \
                    --exclude '.git' \
                    "${{ github.workspace }}/" "${APP_PATH}/"
                  sudo chown -R "$USER":"$USER" "${APP_PATH}"

            # If using a private registry, login before build/push (optional)
            # - name: Docker login
            #   run: echo "${{ secrets.REGISTRY_PASS }}" | docker login registry.local -u "${{ secrets.REGISTRY_USER }}" --password-stdin

            - name: Build image (tags as :latest to match compose)
              run: |
                  cd "${APP_PATH}"
                  docker build --pull -t "${IMAGE_NAME}:${IMAGE_TAG}" .

            - name: Render compose (no image tag injection needed)
              run: |
                  cd "${APP_PATH}"
                  docker compose config > /tmp/stack.rendered.yml

            - name: Deploy to Swarm
              run: |
                  docker stack deploy --prune -c /tmp/stack.rendered.yml "${STACK_NAME}"

            - name: Verify rollout
              run: |
                  echo "Services:"
                  docker stack services "${STACK_NAME}"
                  echo
                  echo "Tasks (running, up to 20 per svc):"
                  for svc in $(docker stack services --format '{{.Name}}' "${STACK_NAME}"); do
                    echo "---- $svc ----"
                    docker service ps --no-trunc --filter desired-state=running --limit 20 "$svc" || true
                  done

            - name: Cleanup dangling images
              run: |
                  docker image prune -f || true
